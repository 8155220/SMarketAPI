// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SMarketAPI.Models;

namespace SMarketAPI.Migrations
{
    [DbContext(typeof(SMarketContext))]
    [Migration("20181007071454_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SMarketAPI.Models.Image", b =>
                {
                    b.Property<long>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ProductId");

                    b.Property<string>("Url");

                    b.HasKey("ImageId");

                    b.HasIndex("ProductId");

                    b.ToTable("Image");
                });

            modelBuilder.Entity("SMarketAPI.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BuyPrice");

                    b.Property<string>("Description");

                    b.Property<string>("ExpirationDate");

                    b.Property<string>("Image");

                    b.Property<string>("Name");

                    b.Property<int>("ProductTypeId");

                    b.Property<string>("SellPrice");

                    b.Property<int>("UnitTypeId");

                    b.HasKey("ProductId");

                    b.HasIndex("ProductTypeId");

                    b.HasIndex("UnitTypeId");

                    b.ToTable("Products");

                    b.HasData(
                        new { ProductId = 1, BuyPrice = "180.12", Description = "Batallola Engarbullar Descerebrado Incorregibilidad Géminis Generador Batanear.", ExpirationDate = "9/7/2019 8:16:55 PM", Image = "https://s3.amazonaws.com/uifaces/faces/twitter/scottiedude/128.jpg", Name = "Pequeño Fresco Zapatos", ProductTypeId = 6, SellPrice = "403.85", UnitTypeId = 3 },
                        new { ProductId = 2, BuyPrice = "381.71", Description = "Cencío Descervigar Incorporeidad.", ExpirationDate = "8/31/2019 3:10:52 AM", Image = "https://s3.amazonaws.com/uifaces/faces/twitter/beshur/128.jpg", Name = "Inteligente Fresco Ratón", ProductTypeId = 6, SellPrice = "155.92", UnitTypeId = 4 },
                        new { ProductId = 3, BuyPrice = "787.17", Description = "Fidalgo Cencellada Gemiquear Bastonazo Incorporeidad.", ExpirationDate = "8/6/2019 8:41:18 PM", Image = "https://s3.amazonaws.com/uifaces/faces/twitter/kanickairaj/128.jpg", Name = "Elegante Fresco Jabón", ProductTypeId = 7, SellPrice = "287.00", UnitTypeId = 1 },
                        new { ProductId = 4, BuyPrice = "874.22", Description = "Incrementar Cencellada Abad Gendarme Descenso Cencuate Gendarme Gemíparo Batallar.", ExpirationDate = "10/7/2018 5:32:45 PM", Image = "https://s3.amazonaws.com/uifaces/faces/twitter/txcx/128.jpg", Name = "Hecho a mano Soft Jabón", ProductTypeId = 5, SellPrice = "244.26", UnitTypeId = 4 },
                        new { ProductId = 5, BuyPrice = "404.89", Description = "Ceñar Fidalgo Abajamiento Cenefa Batalán Incorruptamente Incorregibilidad.", ExpirationDate = "6/17/2019 11:00:50 PM", Image = "https://s3.amazonaws.com/uifaces/faces/twitter/rohixx/128.jpg", Name = "Elegante Acero Sombrero", ProductTypeId = 7, SellPrice = "844.63", UnitTypeId = 2 },
                        new { ProductId = 6, BuyPrice = "280.29", Description = "Descervigar Abadiado Cendrada Bátavo Genealogía Generacional.", ExpirationDate = "8/7/2019 6:57:05 PM", Image = "https://s3.amazonaws.com/uifaces/faces/twitter/ntfblog/128.jpg", Name = "Pequeño Soft Camisa", ProductTypeId = 7, SellPrice = "613.77", UnitTypeId = 1 },
                        new { ProductId = 7, BuyPrice = "308.04", Description = "Cencuate Engarbullar Cenco.", ExpirationDate = "12/28/2018 10:42:14 PM", Image = "https://s3.amazonaws.com/uifaces/faces/twitter/RussellBishop/128.jpg", Name = "Práctica Acero Toallas", ProductTypeId = 2, SellPrice = "511.04", UnitTypeId = 3 },
                        new { ProductId = 8, BuyPrice = "426.95", Description = "Bástulo Fideicomiso Descensión Engarbullar Ceneque.", ExpirationDate = "7/26/2019 10:47:17 AM", Image = "https://s3.amazonaws.com/uifaces/faces/twitter/mattdetails/128.jpg", Name = "Ergonómico Frozen Ratón", ProductTypeId = 9, SellPrice = "933.04", UnitTypeId = 1 },
                        new { ProductId = 9, BuyPrice = "467.13", Description = "Incorrección Fideísmo Cenero Bateador.", ExpirationDate = "3/27/2019 12:31:35 AM", Image = "https://s3.amazonaws.com/uifaces/faces/twitter/idiot/128.jpg", Name = "Sin marca Madera Auto", ProductTypeId = 2, SellPrice = "511.47", UnitTypeId = 1 },
                        new { ProductId = 10, BuyPrice = "0.58", Description = "Abadí Descimbramiento Batanero Incorporación.", ExpirationDate = "6/1/2019 6:05:31 PM", Image = "https://s3.amazonaws.com/uifaces/faces/twitter/alsobrooks/128.jpg", Name = "Licencia Metal Jabón", ProductTypeId = 4, SellPrice = "673.11", UnitTypeId = 3 }
                    );
                });

            modelBuilder.Entity("SMarketAPI.Models.ProductType", b =>
                {
                    b.Property<int>("ProductTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("ProductTypeId");

                    b.ToTable("ProductType");

                    b.HasData(
                        new { ProductTypeId = 1, Description = "Caucho", Name = "Genérica" },
                        new { ProductTypeId = 2, Description = "Caucho", Name = "Gorgeous" },
                        new { ProductTypeId = 3, Description = "Plástico", Name = "Artesanal" },
                        new { ProductTypeId = 4, Description = "Soft", Name = "Licencia" },
                        new { ProductTypeId = 5, Description = "Fresco", Name = "Increíble" },
                        new { ProductTypeId = 6, Description = "Soft", Name = "Increíble" },
                        new { ProductTypeId = 7, Description = "Metal", Name = "Elegante" },
                        new { ProductTypeId = 8, Description = "Plástico", Name = "Pequeño" },
                        new { ProductTypeId = 9, Description = "Frozen", Name = "Increíble" },
                        new { ProductTypeId = 10, Description = "Acero", Name = "Rústico" }
                    );
                });

            modelBuilder.Entity("SMarketAPI.Models.UnitType", b =>
                {
                    b.Property<int>("UnitTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.HasKey("UnitTypeId");

                    b.ToTable("UnitType");

                    b.HasData(
                        new { UnitTypeId = 1, Description = "kilos" },
                        new { UnitTypeId = 2, Description = "gramos" },
                        new { UnitTypeId = 3, Description = "litros" },
                        new { UnitTypeId = 4, Description = "mililitros" }
                    );
                });

            modelBuilder.Entity("SMarketAPI.Models.Image", b =>
                {
                    b.HasOne("SMarketAPI.Models.Product", "Product")
                        .WithMany("Images")
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("SMarketAPI.Models.Product", b =>
                {
                    b.HasOne("SMarketAPI.Models.ProductType", "ProductType")
                        .WithMany()
                        .HasForeignKey("ProductTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SMarketAPI.Models.UnitType", "UnitType")
                        .WithMany()
                        .HasForeignKey("UnitTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
