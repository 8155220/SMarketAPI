// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SMarketAPI.Models;

namespace SMarketAPI.Migrations
{
    [DbContext(typeof(SMarketContext))]
    [Migration("20181010014341_ProductsModificated")]
    partial class ProductsModificated
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SMarketAPI.Models.Image", b =>
                {
                    b.Property<int>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProductId");

                    b.Property<string>("Url");

                    b.Property<bool>("isMain");

                    b.HasKey("ImageId");

                    b.HasIndex("ProductId");

                    b.ToTable("Image");
                });

            modelBuilder.Entity("SMarketAPI.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("BuyPrice");

                    b.Property<string>("Description");

                    b.Property<DateTime>("ExpirationDate");

                    b.Property<string>("Image");

                    b.Property<string>("Name");

                    b.Property<int>("ProductTypeId");

                    b.Property<string>("Provider");

                    b.Property<decimal>("SellPrice");

                    b.Property<int>("UnitTypeId");

                    b.HasKey("ProductId");

                    b.HasIndex("ProductTypeId");

                    b.HasIndex("UnitTypeId");

                    b.ToTable("Products");

                    b.HasData(
                        new { ProductId = 1, BuyPrice = 331.22m, Description = "Gencianáceo Desceñir Cencivera Cenceño Ficción Gemiqueo Abacial.", ExpirationDate = new DateTime(2018, 10, 16, 15, 57, 51, 289, DateTimeKind.Local), Image = "https://s3.amazonaws.com/uifaces/faces/twitter/giancarlon/128.jpg", Name = "Licencia Frozen Pelota", ProductTypeId = 5, SellPrice = 696.82m, UnitTypeId = 4 },
                        new { ProductId = 2, BuyPrice = 391.05m, Description = "Descerrumarse Fichero Bastonero Abadejo Cencerrear Descifrable Gemonias Incrédulo Descenso.", ExpirationDate = new DateTime(2019, 6, 2, 11, 59, 2, 714, DateTimeKind.Local), Image = "https://s3.amazonaws.com/uifaces/faces/twitter/benefritz/128.jpg", Name = "Rústico Madera Zapatos", ProductTypeId = 4, SellPrice = 345.08m, UnitTypeId = 3 },
                        new { ProductId = 3, BuyPrice = 323.50m, Description = "Bastonear Incorrupción Generable Abadengo Ceñar Fido Fideero Bastonada Incremento.", ExpirationDate = new DateTime(2019, 4, 22, 11, 14, 35, 526, DateTimeKind.Local), Image = "https://s3.amazonaws.com/uifaces/faces/twitter/kylefrost/128.jpg", Name = "Artesanal Soft Pelota", ProductTypeId = 10, SellPrice = 1.30m, UnitTypeId = 1 },
                        new { ProductId = 4, BuyPrice = 925.64m, Description = "Descerebrado Engarrafar Engargantar Cencero Fideísmo Abada Abacora Descerebración Incorrupto Batallar.", ExpirationDate = new DateTime(2019, 8, 21, 21, 58, 37, 284, DateTimeKind.Local), Image = "https://s3.amazonaws.com/uifaces/faces/twitter/aio___/128.jpg", Name = "Refinado Soft Pescado", ProductTypeId = 7, SellPrice = 923.80m, UnitTypeId = 1 },
                        new { ProductId = 5, BuyPrice = 582.82m, Description = "Descerrajado Genealogista Genealógico Batavia.", ExpirationDate = new DateTime(2019, 6, 3, 19, 46, 44, 316, DateTimeKind.Local), Image = "https://s3.amazonaws.com/uifaces/faces/twitter/tur8le/128.jpg", Name = "Pequeño Metal Bike", ProductTypeId = 8, SellPrice = 842.84m, UnitTypeId = 4 }
                    );
                });

            modelBuilder.Entity("SMarketAPI.Models.ProductType", b =>
                {
                    b.Property<int>("ProductTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("ProductTypeId");

                    b.ToTable("ProductType");

                    b.HasData(
                        new { ProductTypeId = 1, Description = "Caucho", Name = "Sabrosa" },
                        new { ProductTypeId = 2, Description = "Hormigón", Name = "Inteligente" },
                        new { ProductTypeId = 3, Description = "Granito", Name = "Rústico" },
                        new { ProductTypeId = 4, Description = "Cotton", Name = "Genérica" },
                        new { ProductTypeId = 5, Description = "Acero", Name = "Genérica" },
                        new { ProductTypeId = 6, Description = "Fresco", Name = "Increíble" },
                        new { ProductTypeId = 7, Description = "Madera", Name = "Sabrosa" },
                        new { ProductTypeId = 8, Description = "Fresco", Name = "Pequeño" },
                        new { ProductTypeId = 9, Description = "Hormigón", Name = "Gorgeous" },
                        new { ProductTypeId = 10, Description = "Granito", Name = "Increíble" }
                    );
                });

            modelBuilder.Entity("SMarketAPI.Models.UnitType", b =>
                {
                    b.Property<int>("UnitTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<string>("Symbol");

                    b.HasKey("UnitTypeId");

                    b.ToTable("UnitType");

                    b.HasData(
                        new { UnitTypeId = 1, Description = "kilos", Symbol = "kg" },
                        new { UnitTypeId = 2, Description = "gramos", Symbol = "gr" },
                        new { UnitTypeId = 3, Description = "litros", Symbol = "lt" },
                        new { UnitTypeId = 4, Description = "mililitros", Symbol = "ml" }
                    );
                });

            modelBuilder.Entity("SMarketAPI.Models.Image", b =>
                {
                    b.HasOne("SMarketAPI.Models.Product", "Product")
                        .WithMany("Images")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SMarketAPI.Models.Product", b =>
                {
                    b.HasOne("SMarketAPI.Models.ProductType", "ProductType")
                        .WithMany()
                        .HasForeignKey("ProductTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SMarketAPI.Models.UnitType", "UnitType")
                        .WithMany()
                        .HasForeignKey("UnitTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
